{"version":3,"sources":["../../src/library/get-forced-case-fn.js"],"names":["getForcedCaseFn","rule","noop","input","config","Array","isArray","level","when","target","toUpperCase","charAt","substring","toLowerCase","TypeError"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;AAKe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC7C,QAAMC,IAAI,GAAGC,KAAK,IAAIA,KAAtB;;AAEA,MAAI,CAACF,IAAL,EAAW;AACV,WAAOC,IAAP;AACA;;AAL4C,6CAO5BD,IAP4B;AAAA,QAOtCG,MAPsC;;AAS7C,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AAC3B,WAAOF,IAAP;AACA;;AAX4C,+CAa7BE,MAb6B;AAAA,QAatCG,KAbsC;;AAe7C,MAAIA,KAAK,KAAK,CAAd,EAAiB;AAChB;AACA;;AAjB4C,gDAmB5BH,MAnB4B;AAAA,QAmBpCI,IAnBoC;;AAqB7C,MAAIA,IAAI,KAAK,OAAb,EAAsB;AACrB;AACA;;AAvB4C,gDAyBxBJ,MAzBwB;AAAA,QAyBlCK,MAzBkC;;AA2B7C,MAAIJ,KAAK,CAACC,OAAN,CAAcG,MAAd,CAAJ,EAA2B;AAC1B,WAAOP,IAAP;AACA;;AAED,UAAQO,MAAR;AACC,SAAK,YAAL;AACC,aAAON,KAAK,IAAI,wBAAUA,KAAV,CAAhB;;AACD,SAAK,YAAL;AACC,aAAOA,KAAK,IAAI,wBAAUA,KAAV,CAAhB;;AACD,SAAK,YAAL;AACC,aAAOA,KAAK,IAAI,wBAAUA,KAAV,CAAhB;;AACD,SAAK,aAAL;AACC,aAAOA,KAAK,IAAI,yBAAW,wBAAUA,KAAV,CAAX,CAAhB;;AACD,SAAK,YAAL;AACC,aAAOA,KAAK,IAAI,wBAAUA,KAAV,CAAhB;;AACD,SAAK,YAAL;AACA,SAAK,WAAL;AACC,aAAOA,KAAK,IAAIA,KAAK,CAACO,WAAN,EAAhB;;AACD,SAAK,eAAL;AACA,SAAK,cAAL;AACC,aAAOP,KAAK,IACV,GAAEA,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgBD,WAAhB,EAA8B,GAAEP,KAAK,CAACS,SAAN,CAAgB,CAAhB,EAAmBC,WAAnB,EAAiC,EADrE;;AAED,SAAK,YAAL;AACA,SAAK,WAAL;AACA,SAAK,WAAL;AAAkB;AACjB,aAAOV,KAAK,IAAIA,KAAK,CAACU,WAAN,OAAwBV,KAAxC;;AACD;AACC,YAAM,IAAIW,SAAJ,CAAe,wBAAuBb,IAAI,CAAC,CAAD,CAAI,GAA9C,CAAN;AAvBF;AAyBA","sourcesContent":["import camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\nimport snakeCase from 'lodash/snakeCase';\nimport upperFirst from 'lodash/upperFirst';\nimport startCase from 'lodash/startCase';\n\n/**\n * Get forced case for rule\n * @param {object} rule to parse\n * @return {fn} transform function applying the enforced case\n */\nexport default function getForcedCaseFn(rule) {\n\tconst noop = input => input;\n\n\tif (!rule) {\n\t\treturn noop;\n\t}\n\n\tconst [config] = rule;\n\n\tif (!Array.isArray(config)) {\n\t\treturn noop;\n\t}\n\n\tconst [level] = config;\n\n\tif (level === 0) {\n\t\treturn;\n\t}\n\n\tconst [, when] = config;\n\n\tif (when === 'never') {\n\t\treturn;\n\t}\n\n\tconst [, , target] = config;\n\n\tif (Array.isArray(target)) {\n\t\treturn noop;\n\t}\n\n\tswitch (target) {\n\t\tcase 'camel-case':\n\t\t\treturn input => camelCase(input);\n\t\tcase 'kebab-case':\n\t\t\treturn input => kebabCase(input);\n\t\tcase 'snake-case':\n\t\t\treturn input => snakeCase(input);\n\t\tcase 'pascal-case':\n\t\t\treturn input => upperFirst(camelCase(input));\n\t\tcase 'start-case':\n\t\t\treturn input => startCase(input);\n\t\tcase 'upper-case':\n\t\tcase 'uppercase':\n\t\t\treturn input => input.toUpperCase();\n\t\tcase 'sentence-case':\n\t\tcase 'sentencecase':\n\t\t\treturn input =>\n\t\t\t\t`${input.charAt(0).toUpperCase()}${input.substring(1).toLowerCase()}`;\n\t\tcase 'lower-case':\n\t\tcase 'lowercase':\n\t\tcase 'lowerCase': // Backwards compat config-angular v4\n\t\t\treturn input => input.toLowerCase() === input;\n\t\tdefault:\n\t\t\tthrow new TypeError(`Unknown target case \"${rule[2]}\"`);\n\t}\n}\n"],"file":"get-forced-case-fn.js"}