{"version":3,"sources":["../../src/library/get-prompt.js"],"names":["getPrompt","type","context","rules","settings","results","prompter","TypeError","prompt","removeAllListeners","command","catch","addListener","log","delimiter","show","enumRule","filter","enumRuleIsActive","emptyRule","mustBeEmpty","mayNotBeEmpty","mayBeEmpty","ui","redraw","done","Promise","resolve","caseRule","forceCaseFn","leadingBlankRule","forceLeadingBlankFn","maxLenghtRule","hasMaxLength","inputMaxLength","Infinity","headerLength","header","length","remainingHeaderLength","scope","subject","join","maxLength","Math","min","enums","forEach","enumerable","enumSettings","enumerables","description","action","parameters","text","onSubmit","input","chalk","yellow","bold","blue","exec","drawRemaining","colors","threshold","color","item","map","onKey","event","sanitized","value","cropped","slice","optional","required","multiline","grey"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\n\nimport enumRuleIsActive from './enum-rule-is-active';\nimport format from './format';\nimport getForcedCaseFn from './get-forced-case-fn';\nimport getForcedLeadingFn from './get-forced-leading-fn';\nimport getHasName from './get-has-name';\nimport meta from './meta';\n\nexport default getPrompt;\n\n/**\n * Get a cli prompt based on rule configuration\n * @param  {string} type     type of the data to gather\n * @param  {object} context     rules to parse\n * @return {object}          prompt instance\n */\nfunction getPrompt(type, context = {}) {\n\tconst {rules = [], settings = {}, results = {}, prompter} = context;\n\n\tif (typeof prompter !== 'function') {\n\t\tthrow new TypeError('Missing prompter function in getPrompt context');\n\t}\n\n\tconst prompt = prompter();\n\n\tif (typeof prompt.removeAllListeners !== 'function') {\n\t\tthrow new TypeError(\n\t\t\t'getPrompt: prompt.removeAllListeners is not a function'\n\t\t);\n\t}\n\n\tif (typeof prompt.command !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.command is not a function');\n\t}\n\n\tif (typeof prompt.catch !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.catch is not a function');\n\t}\n\n\tif (typeof prompt.addListener !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.addListener is not a function');\n\t}\n\n\tif (typeof prompt.log !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.log is not a function');\n\t}\n\n\tif (typeof prompt.delimiter !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.delimiter is not a function');\n\t}\n\n\tif (typeof prompt.show !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.show is not a function');\n\t}\n\n\tconst enumRule = rules.filter(getHasName('enum')).filter(enumRuleIsActive)[0];\n\n\tconst emptyRule = rules.filter(getHasName('empty'))[0];\n\n\tconst mustBeEmpty = emptyRule\n\t\t? emptyRule[1][0] > 0 && emptyRule[1][1] === 'always'\n\t\t: false;\n\n\tconst mayNotBeEmpty = emptyRule\n\t\t? emptyRule[1][0] > 0 && emptyRule[1][1] === 'never'\n\t\t: false;\n\n\tconst mayBeEmpty = !mayNotBeEmpty;\n\n\tif (mustBeEmpty) {\n\t\tprompt.removeAllListeners('keypress');\n\t\tprompt.removeAllListeners('client_prompt_submit');\n\t\tprompt.ui.redraw.done();\n\t\treturn Promise.resolve();\n\t}\n\n\tconst caseRule = rules.filter(getHasName('case'))[0];\n\n\tconst forceCaseFn = getForcedCaseFn(caseRule);\n\n\tconst leadingBlankRule = rules.filter(getHasName('leading-blank'))[0];\n\n\tconst forceLeadingBlankFn = getForcedLeadingFn(leadingBlankRule);\n\n\tconst maxLenghtRule = rules.filter(getHasName('max-length'))[0];\n\n\tconst hasMaxLength = maxLenghtRule && maxLenghtRule[1][0] > 0;\n\n\tconst inputMaxLength = hasMaxLength ? maxLenghtRule[1][1] : Infinity;\n\n\tconst headerLength = settings.header ? settings.header.length : Infinity;\n\n\tconst remainingHeaderLength = headerLength\n\t\t? headerLength -\n\t\t  [\n\t\t\t\tresults.type,\n\t\t\t\tresults.scope,\n\t\t\t\tresults.scope ? '()' : '',\n\t\t\t\tresults.type && results.scope ? ':' : '',\n\t\t\t\tresults.subject\n\t\t  ].join('').length\n\t\t: Infinity;\n\n\tconst maxLength = Math.min(inputMaxLength, remainingHeaderLength);\n\n\treturn new Promise(resolve => {\n\t\t// Add the defined enums as sub commands if applicable\n\t\tif (enumRule) {\n\t\t\tconst [, [, , enums]] = enumRule;\n\n\t\t\tenums.forEach(enumerable => {\n\t\t\t\tconst enumSettings = (settings.enumerables || {})[enumerable] || {};\n\t\t\t\tprompt\n\t\t\t\t\t.command(enumerable)\n\t\t\t\t\t.description(enumSettings.description || '')\n\t\t\t\t\t.action(() => {\n\t\t\t\t\t\tprompt.removeAllListeners();\n\t\t\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\t\t\treturn resolve(forceLeadingBlankFn(forceCaseFn(enumerable)));\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tprompt.catch('[text...]').action(parameters => {\n\t\t\t\tconst {text = ''} = parameters;\n\t\t\t\tprompt.removeAllListeners();\n\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\treturn resolve(forceLeadingBlankFn(forceCaseFn(text.join(' '))));\n\t\t\t});\n\t\t}\n\n\t\tif (mayBeEmpty) {\n\t\t\t// Add an easy exit command\n\t\t\tprompt\n\t\t\t\t.command(':skip')\n\t\t\t\t.description('Skip the input if possible.')\n\t\t\t\t.action(() => {\n\t\t\t\t\tprompt.removeAllListeners();\n\t\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\t\tresolve('');\n\t\t\t\t});\n\t\t}\n\n\t\t// Handle empty input\n\t\tconst onSubmit = input => {\n\t\t\tif (input.length > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show help if enum is defined and input may not be empty\n\t\t\tif (mayNotBeEmpty) {\n\t\t\t\tprompt.ui.log(chalk.yellow(`⚠ ${chalk.bold(type)} may not be empty.`));\n\t\t\t}\n\n\t\t\tif (mayBeEmpty) {\n\t\t\t\tprompt.ui.log(\n\t\t\t\t\tchalk.blue(\n\t\t\t\t\t\t`ℹ Enter ${chalk.bold(':skip')} to omit ${chalk.bold(type)}.`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (enumRule) {\n\t\t\t\tprompt.exec('help');\n\t\t\t}\n\t\t};\n\n\t\tconst drawRemaining = length => {\n\t\t\tif (length < Infinity) {\n\t\t\t\tconst colors = [\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: 5,\n\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: 10,\n\t\t\t\t\t\tcolor: 'yellow'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: Infinity,\n\t\t\t\t\t\tcolor: 'grey'\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t\tconst color = colors\n\t\t\t\t\t.filter(item => {\n\t\t\t\t\t\treturn item.threshold >= length;\n\t\t\t\t\t})\n\t\t\t\t\t.map(item => item.color)[0];\n\n\t\t\t\tprompt.ui.redraw(chalk[color](`${length} characters left`));\n\t\t\t}\n\t\t};\n\n\t\tconst onKey = event => {\n\t\t\tconst sanitized = forceCaseFn(event.value);\n\t\t\tconst cropped = sanitized.slice(0, maxLength);\n\n\t\t\t// We **could** do live editing, but there are some quirks to solve\n\t\t\t/* const live = merge({}, results, {\n\t\t\t\t[type]: cropped\n\t\t\t});\n\t\t\tprompt.ui.redraw(`\\n\\n${format(live, true)}\\n\\n`); */\n\n\t\t\tif (maxLength) {\n\t\t\t\tdrawRemaining(maxLength - cropped.length);\n\t\t\t}\n\t\t\tprompt.ui.input(cropped);\n\t\t};\n\n\t\tprompt.addListener('keypress', onKey);\n\t\tprompt.addListener('client_prompt_submit', onSubmit);\n\n\t\tprompt.log(\n\t\t\t`\\n\\nPlease enter a ${chalk.bold(type)}: ${meta({\n\t\t\t\toptional: !mayNotBeEmpty,\n\t\t\t\trequired: mayNotBeEmpty,\n\t\t\t\t'tab-completion': typeof enumRule !== 'undefined',\n\t\t\t\theader: typeof settings.header !== 'undefined',\n\t\t\t\t'multi-line': settings.multiline\n\t\t\t})}`\n\t\t);\n\n\t\tif (settings.description) {\n\t\t\tprompt.log(chalk.grey(`${settings.description}\\n`));\n\t\t}\n\n\t\tprompt.log(`\\n\\n${format(results, true)}\\n\\n`);\n\n\t\tdrawRemaining(maxLength);\n\n\t\tprompt.delimiter(`❯ ${type}:`).show();\n\t});\n}\n"],"file":"get-prompt.js"}