"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getForcedCaseFn;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _kebabCase = _interopRequireDefault(require("lodash/kebabCase"));

var _snakeCase = _interopRequireDefault(require("lodash/snakeCase"));

var _upperFirst = _interopRequireDefault(require("lodash/upperFirst"));

var _startCase = _interopRequireDefault(require("lodash/startCase"));

/**
 * Get forced case for rule
 * @param {object} rule to parse
 * @return {fn} transform function applying the enforced case
 */
function getForcedCaseFn(rule) {
  const noop = input => input;

  if (!rule) {
    return noop;
  }

  const _rule = (0, _slicedToArray2.default)(rule, 1),
        config = _rule[0];

  if (!Array.isArray(config)) {
    return noop;
  }

  const _config = (0, _slicedToArray2.default)(config, 1),
        level = _config[0];

  if (level === 0) {
    return;
  }

  const _config2 = (0, _slicedToArray2.default)(config, 2),
        when = _config2[1];

  if (when === 'never') {
    return;
  }

  const _config3 = (0, _slicedToArray2.default)(config, 3),
        target = _config3[2];

  if (Array.isArray(target)) {
    return noop;
  }

  switch (target) {
    case 'camel-case':
      return input => (0, _camelCase.default)(input);

    case 'kebab-case':
      return input => (0, _kebabCase.default)(input);

    case 'snake-case':
      return input => (0, _snakeCase.default)(input);

    case 'pascal-case':
      return input => (0, _upperFirst.default)((0, _camelCase.default)(input));

    case 'start-case':
      return input => (0, _startCase.default)(input);

    case 'upper-case':
    case 'uppercase':
      return input => input.toUpperCase();

    case 'sentence-case':
    case 'sentencecase':
      return input => `${input.charAt(0).toUpperCase()}${input.substring(1).toLowerCase()}`;

    case 'lower-case':
    case 'lowercase':
    case 'lowerCase':
      // Backwards compat config-angular v4
      return input => input.toLowerCase() === input;

    default:
      throw new TypeError(`Unknown target case "${rule[2]}"`);
  }
}
//# sourceMappingURL=get-forced-case-fn.js.map