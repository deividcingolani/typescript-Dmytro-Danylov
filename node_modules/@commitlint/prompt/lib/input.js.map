{"version":3,"sources":["../src/input.js"],"names":["input","prompter","results","type","scope","subject","body","footer","rules","Promise","all","map","inputRules","getRules","inputSettings","settings","isHeader","indexOf","headerLengthRule","filter","severity","applicable","length","header","catch","err","console","error","getRulePrefix","id","fragments","split","prefix","getHasPrefix","name","rule","Object","entries"],"mappings":"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","sourcesContent":["import load from '@commitlint/load';\nimport throat from 'throat';\n\nimport format from './library/format';\nimport getHasName from './library/get-has-name';\nimport getPrompt from './library/get-prompt';\nimport settings from './settings';\n\nexport default input;\n\n/**\n * Get user input by interactive prompt based on\n * conventional-changelog-lint rules.\n * @param {function} prompter\n * @return {Promise<string>} commit message\n */\nasync function input(prompter) {\n\tconst results = {\n\t\ttype: null,\n\t\tscope: null,\n\t\tsubject: null,\n\t\tbody: null,\n\t\tfooter: null\n\t};\n\n\tconst {rules} = await load();\n\n\tawait Promise.all(\n\t\t['type', 'scope', 'subject', 'body', 'footer'].map(\n\t\t\tthroat(1, async input => {\n\t\t\t\tconst inputRules = getRules(input, rules);\n\t\t\t\tconst inputSettings = settings[input];\n\n\t\t\t\tconst isHeader = ['type', 'scope', 'subject'].indexOf(input) > -1;\n\n\t\t\t\tconst headerLengthRule = getRules('header', rules).filter(\n\t\t\t\t\tgetHasName('max-length')\n\t\t\t\t)[0];\n\n\t\t\t\tif (isHeader && headerLengthRule) {\n\t\t\t\t\tconst [, [severity, applicable, length]] = headerLengthRule;\n\t\t\t\t\tif (severity > 0 && applicable === 'always') {\n\t\t\t\t\t\tinputSettings.header = {\n\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresults[input] = await getPrompt(input, {\n\t\t\t\t\trules: inputRules,\n\t\t\t\t\tsettings: inputSettings,\n\t\t\t\t\tresults,\n\t\t\t\t\tprompter\n\t\t\t\t});\n\t\t\t})\n\t\t)\n\t).catch(err => {\n\t\tconsole.error(err);\n\t\treturn '';\n\t});\n\n\t// Return the results\n\treturn format(results);\n}\n\n/**\n * Get prefix for a given rule id\n * @param  {string} id of the rule\n * @return {string} prefix of the rule\n */\nfunction getRulePrefix(id) {\n\tconst fragments = id.split('-');\n\tconst [prefix] = fragments;\n\treturn fragments.length > 1 ? prefix : null;\n}\n\n/**\n * Get a predecate matching rule definitions with a given prefix\n * @param  {[type]} name [description]\n * @return {[type]}      [description]\n */\nfunction getHasPrefix(name) {\n\treturn rule => getRulePrefix(rule[0]) === name;\n}\n\n/**\n * Get rules for a given prefix\n * @param  {string} prefix to search in rule names\n * @param  {object} rules  rules to search in\n * @return {object}        rules matching the prefix search\n */\nfunction getRules(prefix, rules) {\n\treturn Object.entries(rules).filter(getHasPrefix(prefix));\n}\n"],"file":"input.js"}